// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum OrgType {
  company
  team
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // hashed
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships UserOrganization[]
  tasks       Task[]
  buckets     Bucket[]
  notes       Note[]
  createdOrgs Organization[] @relation("OrganizationCreatedBy")
  invitations Invitation[]
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  type        OrgType  @default(team)
  domain      String?
  settings    Json?
  description String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User      @relation("OrganizationCreatedBy", fields: [createdById], references: [id])
  memberships UserOrganization[]
  projects    Project[]
  tasks       Task[]
  buckets     Bucket[]
  notes       Note[]
  invitations Invitation[]
}

model UserOrganization {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   // "owner" | "admin" | "member"
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true)

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  color          String   @default("#006325")
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  users          ProjectUser[]
  tasks          Task[]
  buckets        Bucket[]
  notes          Note[]
}

model ProjectUser {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String
  joinedAt  DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Bucket {
  id             String   @id @default(cuid())
  name           String
  type           String   // "day" | "custom"
  color          String   @default("#e5efe9")
  order          Int      @default(0)
  userId         String
  organizationId String
  projectId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id])

  tasks Task[]
}

model Task {
  id             String   @id @default(cuid())
  title          String
  description    String?
  priority       String   // "low" | "med" | "high"
  status         String   // "open" | "done"
  dueDate        DateTime?
  category       String?
  notes          String?
  assignedTo     String?  // userId
  startedAt      DateTime?
  completedAt    DateTime?
  completedBy    String?
  userId         String
  organizationId String
  projectId      String?
  bucketId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id])
  bucket       Bucket?      @relation(fields: [bucketId], references: [id])
}

model Note {
  id             String   @id @default(cuid())
  title          String
  content        String
  category       String
  tags           String[]
  isPinned       Boolean   @default(false)
  userId         String
  organizationId String
  projectId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id])
}

model Invitation {
  id             String   @id @default(cuid())
  email          String
  organizationId String
  role           String
  token          String   @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  invitedById    String
  createdAt      DateTime @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      User         @relation(fields: [invitedById], references: [id])
}
